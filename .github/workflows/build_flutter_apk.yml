# This workflow is triggered when a commit is pushed to the main branch
# that includes a change to the 'version' line in the pubspec.yaml file.
name: Build and Release Flutter APK

on:
  push:
    branches:
      - main # Or your default branch, e.g., master
    paths:
      - "pubspec.yaml"

jobs:
  build-and-release:
    name: Build and Release APKs
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Extract the app version from pubspec.yaml
      # This command reads the line containing 'version:', splits it by the space,
      # and takes the second part (the version number).
      - name: Get app version
        id: get_version
        run: echo "APP_VERSION=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2)" >> $GITHUB_ENV

      # Step 3: Set up Java Development Kit (JDK), required for Android builds
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "11"

      # Step 4: Set up the Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable" # You can specify 'beta', 'dev', or 'master'
          cache: true

      # Step 5: Install Flutter dependencies
      - name: Install dependencies
        run: flutter pub get

      # Step 6: Check Flutter environment
      # This provides detailed diagnostics to ensure the environment is healthy.
      - name: Run Flutter Doctor
        run: flutter doctor -v

      # Step 7: Clean the project
      - name: Clean Flutter project
        run: flutter clean

      # Step 8: Build the APKs, split by ABI
      # This command creates separate APKs for different CPU architectures (arm, arm64, x86_64)
      # The --verbose flag is added for more detailed build logs.
      - name: Build split APKs
        run: flutter build apk --split-per-abi --verbose

      # Step 9: Create a GitHub Release
      # This action creates a new release and a corresponding git tag.
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.APP_VERSION }}
          name: Release v${{ env.APP_VERSION }}
          body: |
            Automated release for version ${{ env.APP_VERSION }}.
            APKs are split per ABI.
          draft: false
          prerelease: false
          files: |
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            build/app/outputs/flutter-apk/app-x86_64-release.apk
